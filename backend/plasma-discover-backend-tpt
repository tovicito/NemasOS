#!/usr/bin/env python3
import subprocess
import json
from gi.repository import GLib
from pydbus import SessionBus

class TPTBackend:
    """
    <node>
        <interface name='org.kde.discover.Backend'>
            <method name='Search'>
                <arg type='as' name='searchTerms' direction='in'/>
                <arg type='a(sadd)' name='results' direction='out'/>
            </method>
            <method name='GetDetails'>
                <arg type='s' name='packageId' direction='in'/>
                <arg type='a{sv}' name='details' direction='out'/>
            </method>
            <method name='Install'>
                <arg type='s' name='packageId' direction='in'/>
            </method>
            <method name='Uninstall'>
                <arg type='s' name='packageId' direction='in'/>
            </method>
        </interface>
    </node>
    """

    def _run_tpt_command(self, command):
        """Ejecuta un comando de TPT y devuelve su salida."""
        try:
            # Asumimos que 'tpt' está en el PATH
            result = subprocess.run(['tpt'] + command, capture_output=True, text=True, check=True)
            return result.stdout
        except (subprocess.CalledProcessError, FileNotFoundError) as e:
            print(f"Error ejecutando TPT: {e}")
            return None

    def Search(self, searchTerms):
        print(f"Backend: Recibida búsqueda para: {searchTerms}")
        output = self._run_tpt_command(['search', ' '.join(searchTerms), '--json'])
        if not output:
            return []

        results = []
        try:
            packages = json.loads(output)
            for pkg in packages:
                # El formato de Discover es una tupla: (id, puntuación, resumen)
                results.append((pkg.get('name', 'unknown'), 0.0, pkg.get('description', '')))
        except json.JSONDecodeError as e:
            print(f"Error parseando JSON de TPT: {e}")

        print(f"Backend: Devolviendo {len(results)} resultados.")
        return results

    def GetDetails(self, packageId):
        print(f"Backend: Recibida petición de detalles para: {packageId}")
        output = self._run_tpt_command(['details', packageId])
        if not output:
            return {}

        try:
            details = json.loads(output)
            # Mapear los detalles de TPT al formato que espera Discover
            return {
                'id': details.get('name', ''),
                'name': details.get('name', ''),
                'summary': details.get('description', ''),
                'version': details.get('version', 'N/A'),
                'license': 'Unknown', # TPT no maneja licencias aún
                'url': details.get('repository_url', ''),
                'state': 'available' # TODO: Comprobar si está instalado
            }
        except json.JSONDecodeError as e:
            print(f"Error parseando JSON de detalles: {e}")
            return {}

    def Install(self, packageId):
        print(f"Backend: Recibida orden de instalar: {packageId}")
        # La instalación puede ser larga, idealmente se haría en un hilo
        # y se emitirían señales de progreso, pero para simplificar, la hacemos síncrona.
        self._run_tpt_command(['install', packageId])
        print(f"Backend: Instalación de {packageId} finalizada.")

    def Uninstall(self, packageId):
        print(f"Backend: Recibida orden de desinstalar: {packageId}")
        self._run_tpt_command(['uninstall', packageId])
        print(f"Backend: Desinstalación de {packageId} finalizada.")


if __name__ == '__main__':
    loop = GLib.MainLoop()
    bus = SessionBus()
    bus.publish("io.github.tovicito.tpt", TPTBackend())
    print("Backend de TPT para Discover iniciado en D-Bus.")
    loop.run()
