#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import sys
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout,
    QPushButton, QLabel
)
from PyQt5.QtCore import QTimer, Qt

class PomodoroTimerGUI(QWidget):
    def __init__(self):
        super().__init__()
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_timer)
        self.is_running = False
        self.work_time = 25 * 60 # 25 minutes
        self.break_time = 5 * 60 # 5 minutes
        self.current_time = self.work_time
        self.is_work_time = True
        self.initUI()

    def initUI(self):
        self.setWindowTitle('Temporizador Pomodoro')
        self.setGeometry(300, 300, 400, 200)
        layout = QVBoxLayout()

        self.time_label = QLabel(self.format_time(self.current_time))
        font = self.time_label.font(); font.setPointSize(40); self.time_label.setFont(font)
        self.time_label.setAlignment(Qt.AlignCenter)

        self.status_label = QLabel("Tiempo de Trabajo")
        self.status_label.setAlignment(Qt.AlignCenter)

        btn_layout = QHBoxLayout()
        self.start_stop_btn = QPushButton("Iniciar")
        self.reset_btn = QPushButton("Reiniciar")

        self.start_stop_btn.clicked.connect(self.toggle_timer)
        self.reset_btn.clicked.connect(self.reset_timer)

        btn_layout.addWidget(self.start_stop_btn)
        btn_layout.addWidget(self.reset_btn)

        layout.addWidget(self.status_label)
        layout.addWidget(self.time_label)
        layout.addLayout(btn_layout)
        self.setLayout(layout)

    def format_time(self, seconds):
        mins, secs = divmod(seconds, 60)
        return f'{mins:02d}:{secs:02d}'

    def toggle_timer(self):
        if self.is_running:
            self.timer.stop()
            self.start_stop_btn.setText("Iniciar")
        else:
            self.timer.start(1000) # Update every second
            self.start_stop_btn.setText("Pausar")
        self.is_running = not self.is_running

    def reset_timer(self):
        self.timer.stop()
        self.is_running = False
        self.is_work_time = True
        self.current_time = self.work_time
        self.time_label.setText(self.format_time(self.current_time))
        self.status_label.setText("Tiempo de Trabajo")
        self.start_stop_btn.setText("Iniciar")

    def update_timer(self):
        self.current_time -= 1
        if self.current_time < 0:
            self.is_work_time = not self.is_work_time
            if self.is_work_time:
                self.current_time = self.work_time
                self.status_label.setText("Tiempo de Trabajo")
            else:
                self.current_time = self.break_time
                self.status_label.setText("Tiempo de Descanso")

        self.time_label.setText(self.format_time(self.current_time))


if __name__ == '__main__':
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    ventana = PomodoroTimerGUI()
    ventana.show()
    sys.exit(app.exec_())
